# -*- coding: ISO-8859-1 -*-
# generated by wxGlade 0.3.5.1 on Fri Apr 15 17:02:14 2005

# Papagayo-NG, a lip-sync tool for use with several different animation suites
# Original Copyright (C) 2005 Mike Clifton
# Contact information at http://www.lostmarble.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# import os
from PySide import QtGui, QtCore
from utilities import *


# begin wxGlade: dependencies
# end wxGlade


class MouthView(QtGui.QGraphicsView):
    def __init__(self, parent=None):
        super(MouthView, self).__init__(parent)
        self.setScene(QtGui.QGraphicsScene(self))
        self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        # Other initialization
        self.doc = None
        self.cur_frame = 0
        self.old_frame = 0
        self.current_phoneme = "rest"
        self.current_mouth = None
        self.mouths = {}
        self.load_mouths()
        #
        # # Connect event handlers
        # # window events
        # wx.EVT_PAINT(self, self.OnPaint)
        pass

    def __set_properties(self):
        # begin wxGlade: MouthView.__set_properties
        #self.SetMinSize((200, 200))
        #self.SetBackgroundColour(wx.Colour(255, 255, 255))
        # end wxGlade
        pass

    def __do_layout(self):
        # begin wxGlade: MouthView.__do_layout
        #self.Layout()
        # end wxGlade
        pass

    def OnPaint(self, event):
        # dc = wx.PaintDC(self)
        # dc.SetBackground(wx.Brush(self.GetBackgroundColour()))
        # dc.Clear()
        # self.DrawMe(dc)
        pass

    def draw_me(self, dc=None):
        if (self.doc is not None) and (self.doc.sound is not None) and (self.doc.sound.is_playing()):
            if self.doc.current_voice is not None:
                phoneme = self.doc.current_voice.get_phoneme_at_frame(self.cur_frame)
            else:
                phoneme = "rest"
            if phoneme == self.current_phoneme:
                return
            else:
                self.current_phoneme = phoneme
        else:
            self.current_phoneme = "rest"

        bitmap = self.mouths[self.current_mouth][self.current_phoneme]
        self.scene().clear()
        self.scene().addPixmap(bitmap)
        self.fitInView(self.x(),
                       self.y(),
                       self.width(),
                       self.height())
        print(self.x(),
              self.y(),
              self.width(),
              self.height())
        # if (self.doc is not None) and (self.doc.sound is not None) and (self.doc.sound.IsPlaying()):
        #     if self.doc.currentVoice is not None:
        #         phoneme = self.doc.currentVoice.GetPhonemeAtFrame(self.curFrame)
        #     else:
        #         phoneme = "rest"
        #     if phoneme == self.currentPhoneme:
        #         return
        #     else:
        #         self.currentPhoneme = phoneme
        # else:
        #     self.currentPhoneme = "rest"
        # if dc is None:
        #     dc = wx.ClientDC(self)
        #     freeDC = True
        # else:
        #     freeDC = False
        # # dc.BeginDrawing()
        # if 1:
        #     bitmap = self.mouths[self.currentMouth][self.currentPhoneme]
        #     width, height = self.GetClientSize()
        #     dc.SetBackground(wx.Brush(self.GetBackgroundColour()))
        #     dc.Clear()
        #     dc.DrawBitmap(bitmap, width / 2 - bitmap.GetWidth() / 2, height / 2 - bitmap.GetHeight() / 2)
        # else:
        #     dc.SetBackground(wx.Brush(self.GetBackgroundColour()))
        #     dc.Clear()
        # # dc.EndDrawing()
        # if freeDC:
        #     del dc
        pass

    def set_frame(self, frame):
        self.old_frame = self.cur_frame
        self.cur_frame = frame
        self.draw_me()
        pass

    def set_document(self, doc):
        self.doc = doc
        self.draw_me()
        pass

    def process_mouth_dir(self, dir_name, names, supported_imagetypes):
        has_images = False
        for files in names:
            files = files.lower()
            if files.split(".")[-1] in supported_imagetypes:
                has_images = True
        if not has_images:
            return
        print(os.path.normpath(dir_name), names)
        self.add_mouth(os.path.normpath(dir_name), names)
        pass

    def load_mouths(self):
        print(os.path.join(get_main_dir(), "rsrc", "mouths"))
        supported_imagetypes = QtGui.QImageReader.supportedImageFormats()
        for directory, dir_names, file_names in os.walk(os.path.join(get_main_dir(), "rsrc", "mouths")):
            self.process_mouth_dir(directory, file_names, supported_imagetypes)
        pass

    def add_mouth(self, dir_name, names):
        bitmaps = {}
        for files in names:
            if ".svn" in files:
                continue
            path = os.path.normpath(os.path.join(dir_name, files))
            bitmaps[files.split('.')[0]] = QtGui.QPixmap(path)
        self.mouths[os.path.basename(dir_name)] = bitmaps
        if self.current_mouth is None:
            self.current_mouth = os.path.basename(dir_name)
        pass

# end of class MouthView
